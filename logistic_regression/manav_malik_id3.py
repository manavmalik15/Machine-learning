# -*- coding: utf-8 -*-
"""manav_malik_ID3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1OHByQDDdIUKljbRt7oRJIv_x9b6J1d8-
"""

#Add your name here
#Name:Manav Malik

"""First save a copy on this notebook in your Drive: File->Save a copy in Drive, then rename your file to firstname_lastname_id3.ipynb (e.g. pedram_rooshenas_id3.ipynb). Now you can start

Submission:

1- Run all cells (this is important, the results will remain there for us to look)

2- Download .ipynb

4- Submit .ipynb on Gradescope (After submission double-Check to make sure the cell outputs are there, otherwise you won't get any grade)
"""

import re
import pandas as pd
import math
import numpy as np

"""If you want to continue using Google Colab (strongly recommended), you can load the data to your Google Drive and mount it here

If you like to continue with your local machine, download the ID3.ipynb and run it on your local Jupyter.

"""

#Mounting Google Drive:
#After running this cell a popup window will appear and requesting to select your  Google account and give the access permission.
#You can either use your personal Google account or your UIC Google account.
from google.colab import drive
drive.mount('/content/gdrive')

#After successfull mount, you can browse your Google Drive using linux commands:
!ls /content/gdrive/

#I have placed the data under mlcourse/hw1/agaricus in my Google Drive, so the address is:
#Yours would be different!

!head /content/gdrive/MyDrive/CS\ 412/agaricus/agaricuslepiotatest1.csv

#For this programs we are going to evaluate the ID3 on three different datasets:
#Change the path based on your directory address
path="/content/gdrive/MyDrive/CS 412/"


#for agaricus we don't have a separate validation set, so we are going to reuse the training set.
agaricus = ["agaricus/agaricuslepiotatrain1.csv",
              "agaricus/agaricuslepiotatrain1.csv",
              "agaricus/agaricuslepiotatest1.csv"]

dataset1 = ["data_sets1/training_set.csv",
            "data_sets1/validation_set.csv",
            "data_sets1/test_set.csv"]

# Load data from a file. It returns a list of data points as well as the list of variable names
def read_data(filename):
    f = open(filename, 'r')
    p = re.compile(',')
    data = []
    header = f.readline().strip()
    varnames = p.split(header)
    namehash = {}
    for l in f:
        data.append([int(x) for x in p.split(l.strip())])
    return (data, varnames)

dataset = agaricus
train_data, varnames = read_data(path+dataset[0])
#the last element in the list is the class value."

#You can transfer the data to Pandas dataframe or directly load it with pd.read_csv but manupulating python lists would be easier.
#You can also use pandas to explore at the data.
data_df = pd.DataFrame(train_data, columns=varnames)
data_df

#We check the dimensions of our dataframe
data_df.shape

#The first number in the shape is the xnumber of rows and the second one is the number of columns
#so we can quickly find the number examples:
data_df.shape[0]

#The class label is often the last column
classlabel = data_df.columns[-1]
print(classlabel)

#e.g. number of instances with positive class
data_df['poisonous'].sum()

#First attribute:
attr1 = data_df.columns[0]
print(attr1)

#Finding the rows that cap-shape-bell is one:
data_df[data_df['cap-shape-bell'] == 1]

#Counting the number of rows that cap-shape-bell is one
(data_df['cap-shape-bell'] == 1).sum()

#Rows that have both  cap-shape-bell==1 and are population-several
data_df[(data_df['cap-shape-bell'] == 1) & (data_df['population-several'] == 1)]

#Number of rows:
((data_df['cap-shape-bell'] == 1) & (data_df['population-several'] == 1)).sum()

#Lets drop cap-shape-bell column:
new_data_df = data_df.drop(columns='cap-shape-bell');
new_data_df.columns[0] #the first attribute is different now
#also note that dataframe operations are immutable and you have to assign the output to a variable.

#Ok at this point I guess you know enough pandas to write the actual code.
#the main part that you gonna use dataframe is inside the build_tree function to split the data for each branch and
#in select_attr to do the required counting

#Here we have the neccessary data structure and auxilary functions for construcing the decision trees
#You don't need to modify the codes in this cell
class Node:
    """ Node class for a decision tree. """
    #var is the variable name for the node
    def __init__(self, var):
        self.var = var

    def classify(x):
        """ Handled by the subclasses. """
        return None

    def dump(self, indent):
        """ Handled by the subclasses. """
        return None


class Leaf(Node):
    #value is the label of the leaf node
    def __init__(self, value):
        Node.__init__(self, None);
        self.value = value

    def classify(self, x):
        return self.value

    def dump(self, indent):
        print(' %d' % self.value)


class Split(Node):
    #var: the variable that we create the split on
    #left and right are the branches for each side which are Nodes
    def __init__(self, var, left, right):
        Node.__init__(self, var)
        self.left = left
        self.right = right

    def classify(self, x):
        if x[self.var] == 0:
            return self.left.classify(x)
        else:
            return self.right.classify(x)

    #use to print out the tree recursively
    def dump(self, indent):
        if indent > 0:
            print('')
        for i in range(0, indent):
            print('| ', end='')
        print('%s = 0 :' % self.var,end='')
        self.left.dump(indent+1)
        for i in range(0, indent):
            print('| ', end='')
        print('%s = 1 :' % self.var,end='')
        self.right.dump(indent+1)

"""Helper function computes entropy of Bernoulli distribution with parameter p"""

def entropy(p):
  if p == 0 or p == 1:
    return 0
  else:
    return -p*math.log2(p) - (1-p)*math.log2(1-p)

"""Compute information gain for a particular split, given the counts

ny_nxi : number of occurences of y=1 with x_i=1 for all i=1 to n (#y=1 $\wedge$ #xi =1)
(n is number of variables and each variable is binary)

nxi : number of occurrences of x_i=1 (#x_i)

ny : number of ocurrences of y=1

total: total number instances in this branch

"""

def infogain(ny_nxi, nxi, ny, total):
     #>>> YOUR CODE GOES HERE <<<
    p_y = ny / total
    hy = entropy(p_y)

     # When xi = 1
    if nxi > 0:
        p_y_given_xi_1 = ny_nxi / nxi
        h_y_given_xi_1 = entropy(p_y_given_xi_1)
    else:
        h_y_given_xi_1 = 0

    # When xi = 0
    nxi_0 = total - nxi
    ny_nxi_0 = ny - ny_nxi
    if nxi_0 > 0:
        p_y_given_xi_0 = ny_nxi_0 / nxi_0
        h_y_given_xi_0 = entropy(p_y_given_xi_0)
    else:
        h_y_given_xi_0 = 0

    h_y_given_xi = (nxi / total) * h_y_given_xi_1 + (nxi_0 / total) * h_y_given_xi_0

    info_gain = hy - h_y_given_xi
    return info_gain

#split_df: the portion of the dataframe that routed to the current branch
def select_attr(split_df):
  #>>> YOUR CODE GOES HERE <<<

    target_col = split_df.columns[-1]

    total = len(split_df)
    ny = split_df[target_col].sum()

    selected_attr = None
    max_gain = -1

    for col in split_df.columns[:-1]:
         nxi = split_df[col].sum()

         ny_nxi = split_df[(split_df[col] == 1) & (split_df[target_col] == 1)].shape[0]

         gain = infogain(ny_nxi, nxi, ny, total)

         if gain > max_gain:
            selected_attr = col
            max_gain = gain

    return (selected_attr, max_gain)

"""Build tree in a top-down manner, selecting splits until we hit a pure leaf or all splits look bad.

"""

#Recursive function for building the tree. Note that the vanilla ID3 stops when the nodes are pure (base condition for the recursion);
#config is potential dictionary of hyperparams that you can tune over validation dataset
#For potential list of hyperparams check here:
#https://scikit-learn.org/stable/modules/generated/sklearn.tree.DecisionTreeClassifier.html#sklearn.tree.DecisionTreeClassifier

def build_tree(data, config={}):

    #>>> YOUR CODE GOES HERE <<<
    min_example = config.get('min_example', 1)

    if data[data.columns[-1]].nunique() == 1:
        return Leaf(data[data.columns[-1]].iloc[0])
    if len(data.columns) == 1:
        majority_class = data[data.columns[-1]].mode()[0]
        return Leaf(majority_class)
    if len(data) < min_example:
        majority_class = data[data.columns[-1]].mode()[0]
        return Leaf(majority_class)

    selected_attr, gain = select_attr(data)
    if gain <= 0:
        majority_class = data[data.columns[-1]].mode()[0]
        return Leaf(majority_class)

    left_split = data[data[selected_attr] == 0].drop(columns=[selected_attr])
    right_split = data[data[selected_attr] == 1].drop(columns=[selected_attr])

    if left_split.empty or right_split.empty:
        majority_class = data[data.columns[-1]].mode()[0]
        return Leaf(majority_class)

    left_subtree = build_tree(left_split, config)
    right_subtree = build_tree(right_split, config)

    return Split(selected_attr, left_subtree, right_subtree)

"""Build the decision tree"""

model = build_tree(data_df)

model.dump(0)

"""Calcuating the accuracy"""

#Assume the last column in the class label and returns one dataframe for labels and one for attributes
def separate_attributes_label(data):
  class_column = data.columns[-1]
  xdata = data.drop(columns=class_column);
  ydata = data[class_column];
  return xdata, ydata

xtrain, ytrain = separate_attributes_label(data_df);

def accuracy(model, xdata, ydata):
  correct = 0.0;
  for i in range(xdata.shape[0]):
    if model.classify(xdata.loc[i]) == ydata.loc[i]:
      correct += 1;
  return correct / xdata.shape[0]

print("Train Accuracy: {}".format(accuracy(model, xtrain, ytrain)))

"""Now that we have all pieces working we can automate the training for any given dataset"""

def evaluate(dataset, config={}):
  train = pd.read_csv(path+dataset[0])
  val = pd.read_csv(path+dataset[1])
  test = pd.read_csv(path+dataset[2])

  xtrain, ytrain = separate_attributes_label(train);
  xval, yval = separate_attributes_label(val);
  xtest, ytest = separate_attributes_label(test);

  model = build_tree(train, config)
  model.dump(0)

  print("Train Accuracy: {}".format(accuracy(model, xtrain, ytrain)))
  print("Val Accuracy: {}".format(accuracy(model, xval, yval)))
  print("Test Accuracy: {}".format(accuracy(model, xtest, ytest)))

evaluate(agaricus)

# for i in range(1, 100):
#   print("\n",i,"\n")
#   config={'min_example': i}
#   evaluate(dataset1, config)
#   print("\n\n")


config={'min_example': 14}
evaluate(dataset1, config)